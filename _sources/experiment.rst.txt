Experiments
***********
Data that are processed by the *NXRefine* package are stored as HDF5
files stored according to the `NeXus format
<http://www.nexusformat.org/>`__, which is an international standard for
the storage of x-ray and neutron scattering data. *NXRefine* uses a
hierarchical directory structure to store both the experimental data,
ingested from the raw data generated on an x-ray beamline, and processed
data generated by the data reduction workflow. Scripts and plugins to
the *NeXpy* GUI are used to facilitate the creation of both the
directory hierarchy and the NeXus files themselves.

In the next section, we will describe the workflow used to both ingest
the raw data and transform it into reciprocal space coordinates and
pair-distribution-functions. In this section, we will describe the
directory framework, within which these processes function, and how
*NeXpy* can be used to initialize it.

Experiment Layout
=================
An 'experiment' in *NXRefine* comprises measurements on a set of samples
that are logically grouped together, often because they are performed
within a specific time period and/or share calibration files. At
synchrotron x-ray facilities, it is common to schedule all the
measurements associated with a particular proposal together, so they
would be labelled by the proposal number and/or run cycle. For example,
on beamline 6-ID-D at the Advanced Photon Source, measurements resulting 
from Proposal No. GUP-75969 may be scheduled in a specific run cycle,
say 23-1, and stored in, *e.g.*, ``/data/6-id-d/GUP-75969-23-1``.

In *NXRefine*, it is assumed that all the files associated with a
particular experiment are stored in a single directory, *i.e.*, in the
APS example above, ``GUP-75969-23-1``. This directory should contain
sub-directories that conform to a particular layout, with calibration
files stored in the directory ``calibrations``, NeXus files containing
measurement templates stored in ``configurations``, settings and log
files stored in ``tasks``, and experimental data from each sample stored
in separate directories with a descriptive name. These sample
directories then contain sub-directories for each crystal, measured
during the experiment, containing the measured data.

Here is the structure of a possible experiment directory. Most of the
names in this example are chosen to be generic, *i.e.*, they will be
different for every experiment. The only exceptions are the files in the
``tasks`` directory, which are set automatically by *NXRefine*.::

    experiment
    └── tasks
        ├── nxdatabase.db
        ├── nxlogger.log
        ├── settings.ini
    └── calibrations
        └── powder_calibration.tiff
    └── configurations
        ├── configuration.nxs
    └── sample1
        └── label1
            ├── sample1_100K.nxs
            └── 100K
                ├── f1.h5
                ├── f2.h5
                ├── f3.h5
                ├── f1_transform.nxs
                ├── f2_transform.nxs
                ├── f3_transform.nxs
                └── transform.nxs
            ├── sample1_200K.nxs
            └── sample1_300K.nxs
        └── label2
            └── sample1_300K.nxs
    ├── sample2
    ├── sample3

The aim of this directory structure is for all the data and metadata
required to analyze the results to be stored in an easily accessible
location, although not all files are required by *NXRefine* to be
present. For example, the powder calibration files can be imported from
any location.

If an instrument does not exclusively use *NXRefine* for its data
reduction, it is possible that there already exists a directory
containing the files that comprise an experiment as described above. To
avoid any interference with other instrument files, it is possible to
create the above directory structure within a sub-directory, usually
called ``nxrefine``, of the instrument's ``experiment`` directory.::

    experiment
    └── nxrefine
        ├── tasks
        ├── calibrations
        ├── configurations
        ├── scripts
        ├── sample1
        └── sample2
        .
        .
        .

.. note:: The name of this sub-directory is defined in the server
          settings, which are described below. Although it can have any
          name, it is strongly recommended that it be called
          ``nxrefine`` to simplify parsing of the directory tree.

Experiment Sub-Directories
==========================

**tasks**
    The ``tasks`` sub-directory contains a number of files used by
    *NXRefine* to store default settings, workflow logs, and a MySQL
    database for recording the status of each workflow component. The
    files in this directory are created automatically by *NXRefine* and
    should not be touched. *NeXpy* GUIs are used to inspect their
    contents.

**calibrations**
    The ``calibrations`` sub-directory is designed to contain either the
    TIFF or CBF files generated by measurements of a calibrant powder,
    or a file, usually with extension ``.poni``, containing the
    instrument parameters calibrated using the *PyFAI* module. The
    workflow includes a GUI for performing *PyFAI* calibrations directly
    on powder calibration image files, with the results stored in the
    NeXus files (described below). The files don't have to be stored in
    this sub-directory, but if they are in another location, it is
    recommended to copy them here for completeness. If the calibrations
    have been performed by another package, the PONI parameters can be
    imported directly from a PONI file.

**configurations**
    The ``configurations`` sub-directory contains NeXus files that act
    as templates when creating the files used to store the scan results.
    These files contain scan parameters, such as the goniometer angles,
    for one or more sample rotations, and are initialized by a *NeXpy*
    GUI dialog.

**scripts**
    The ``scripts`` sub-directory is not used directly by *NXRefine*,
    but is created by the ``New Experiment`` dialog described below. It
    is designed to store macros for use during an experiment.

**sample**
    The ``sample`` sub-directories are typically named after a common
    abbreviation or chemical formula of the measured sample (*e.g.*,
    ``TiSe2``). Within each sample directory are one or more directories
    usually corresponding to different crystals, specified by unique
    labels typically provided by the crystal grower. It is common in
    these experiments to screen a number of crystals before selecting
    one for further measurements, in which case many of these
    directories would only contain a single scan.

    Within each ``label`` directory, there are one or more directories
    that are named after the parametric variable being modified between
    each set of rotation scans, *e.g.*, ``100K``. These ``scan``
    directories contain the raw data in HDF5 files, typically with
    extension ``.h5``. Each one of these ``.h5`` files contain the raw
    data from a single rotation scan stacked into a single HDF5 array.
    It is common to perform three sample rotations, which are then
    stored in ``f1.h5``, ``f2.h5``, and ``f3.h5``, but any number is
    possible. The ``scan`` directories also contain other files produced
    during the data reduction procedure, such as data transformed into
    reciprocal space coordinates or pair-distribution functions.
    
    For each of these ``scan`` directories, there is a corresponding
    NeXus file that is named as, *e.g.*, ``sample_scan.nxs``, where
    ``sample`` must be the name of the ``sample`` directory and ``scan``
    should be the name of the directory containing the raw data.
    These NeXus files contain external links to the much larger files
    stored in the ``scan`` directories. By opening them, the user has
    access to all the data and metadata associated with a particular
    scan, since external links, if they are available, will appear to be
    part of the file.

.. note:: External links are defined by the file name and internal path
          to the required HDF5 field. If the file and/or field are not
          available, the NeXus file can still be opened, but the
          corresponding data cannot be viewed. The file name is stored
          as a relative file path, so the NeXus file and a subset of
          the files in the ``scan`` directory can be moved to another
          location if, for example, access to the raw data is no
          longer necessary.

.. figure:: /images/instrument-settings.png
   :align: right
   :width: 90%
   :figwidth: 50%

Instrument Setup
================
The experiment directory layout can be created automatically using GUI
dialogs in the *NeXpy* "Experiment" menu. Before using them, it is
important to have initialized the default instrument parameters using
the "Edit Settings" dialog of the *NeXpy* "Server" menu, or at the
command line using ``nxsettings -i``.

The instrument settings provide information on the directories, in which
both the raw data and the *NXRefine* directory tree are located. It is
quite common for the raw data to be collected as a set of image files,
typically TIFF or CBF files. These are usually not stored in the
experiment directories described in the previous section, and may be in
read-only directories. To allow for the input of such files, *NXRefine*
defines two sets of paths; one to the 'raw' data and one to the
*NXRefine* (or 'analysis') directories. It is assumed that the
experiment names, *e.g.*, ``GUP-75969-23-1``, are the same in both
locations, although alternative methods of linking the 'raw' and
'analysis' paths could be defined in the customized beamline classes
described later.

For example, at CHESS, the 'raw' and 'analysis' paths are defined in
parallel directory trees as follows (with generic experiment names)::

    /nfs/chess/id4b                         /nfs/chess/id4baux
    ├── 2023-1                              ├── 2023-1
    ├── 2023-2                              ├── 2023-2
    └── 2023-2                              └── 2023-2
        ├── experiment1                         ├── experiment1
        ├── experiment2                         ├── experiment2
        └── experiment3                         └── experiment3
            └── raw6M                               └── nxrefine
                ├── sample1                             ├── sample1
                ├── sample2                             ├── sample2
                └── sample3                             └── sample3
                    └── label1                              └── label1
                        ├── 100                                 ├── 100
                        ├── 200                                 ├── 200
                        └── 300                                 └── 300

Here is a list of instrument parameters.

:source: This is the name of the synchrotron source, at which the 
         instrument is located. This will be stored in the NeXus files
         during the data reduction, but is not otherwise used.

:instrument: This is the name of the instrument. If a customized
             beamline package is to be imported, this must correspond to
             the instrument name used in the package.

:raw_home: This is the home directory, in which the experimental raw
           data are stored. In the above example, this could be
           ``/nfs/chess/id4b/2023-3``.

:raw_path: This is the path within the experiment directory to the
           sample directories. In the above example, this would be
           ``raw6M``.

:analysis_home: This is the home directory, in which the data are
                analyzed. In the above example, this could be
                ``/nfs/chess/id4baux/2023-3``.

:analysis_path: This is the path within the experiment directory to the
                *NXRefine* sub-directories. In the above example, this
                would be ``nxrefine``.

On Sector 6 at the APS, the images are automatically stacked as HDF5
files and saved in the analysis directories as ``f1.h5``, ``f2.h5``,
*etc*, so the paths to the raw data are not required and can be left
blank. The 'analysis_path' field is also blank, since the sample
directories are at the top level of the experiment directories.

If someone wants to use *NXRefine* to analyze data collected as image
files, which are not stored in a directory tree compatible with the
above description, there are two options. Firstly, the ``NXBeamLine``
class, which is described later, is designed to allow beamline-specific
methods of importing the data and metadata. These can be implemented in
separate packages that are imported into *NXRefine* as plugins.
Secondly, the image files can be loaded into HDF5 files using the
`nexusformat <https://nexpy.github.io/nexpy>`_ command-line script,
'nxstack' and saved to the scan directories described above.  Type
``nxstack -h`` at the terminal command line to see possible options.

Experiment Menu
===============
The *NXRefine* plugin to *NeXpy* installs a top-level menu labelled
"Experiment". The sub-menus run operations to initialize the experiment
layout, create experimental data templates, calibrate powder data, and
initialize new data files.

New Experiment
--------------
This dialog initializes a new experiment directory layout using the
server settings to initialize default locations. When the dialog is
launched, click on "Choose Experiment Directory" to launch the system
file browser in order to select or create the new experiment  directory.

.. figure:: /images/new-experiment-CHESS.png
   :align: center
   :width: 80%

There are two scenarios.

1. If ``raw_home`` is not blank in the server settings, the file browser
   will default to the ``raw_home`` directory, in which an experiment
   directory, containing the raw image files, should already exist. This
   experiment directory is then selected, after which the dialog above
   is created, with the experiment name (*i.e.*, the base name of the
   experiment directory path) already filled in, along with the path to
   analysis home directory (``analysis_home`` in the server settings)
   and the name of the analysis sub-directory if required. When the
   "Save" button is pressed, the new experiment directory is created
   within the analysis home directory if it does not already exist, and
   the experiment directory tree is initialized with the
   ``calibrations``, ``configurations``, ``scripts`` and ``tasks``
   sub-directories.

2. If ``raw_home`` is blank, the file browser will default to the
   ``analysis_home`` directory, but another location can be selected if
   required. The file browser can be used either to select an existing
   experiment directory or to create a new one. The above dialog is then
   created with the experiment name given by the base name of the
   selected experiment directory path, and the analysis home directory
   defined by its parent. When the "Save" button is pressed, the
   experiment directory tree is initialized with the ``calibrations``,
   ``configurations``, ``scripts`` and ``tasks`` sub-directories.

A new ``settings.ini`` file is created in the ``tasks`` sub-directory,
with values copied from the equivalent file in the server directory,
excluding the "Server" section. This allows the refinement parameters to
be customized for each experiment.

New configuration
-----------------
This dialog creates NeXus files that are used as templates for the
experimental files that are used to store all the data and metadata
associated with a particular set of rotation scans. The initial metadata
is defined by parameters in the settings file in the ``tasks``
sub-directory, which can be modified by the "Edit Settings" sub-menu
described below. However, some of the metadata will be refined using a
powder calibration, whose results are then stored in this file.

After selecting the experiment directory, the following dialog is created.

.. figure:: /images/new-configuration-CHESS.png
   :align: center
   :width: 80%

This allows the settings used in subsequent analysis to be initialized,
the parameters defining the rotation scans (range, step size, frame
rate) to be set, the detector configuration to be defined, and the
angles and/or detector positions to be used in one or more rotation
scans. These are all saved to the NeXus template. The wavelength and
detector distance can be nominal values at this stage, since they are
updated by performing a powder calibration. Similarly, the instrument
angles, :math:`\theta`, :math:`\omega`, and :math:`\chi` are set to the
angles set by the motors, but will usually be refined when the sample
orientation is determined.

It is possible to create more than one configuration template, if, for
example, different angles and/or detector positions are used in
different phases of an experiment. *NXRefine* allows the appropriate
template to be selected when setting up the scan. A separate template
should be created for each configuration that requires a change in the
instrument calibration (wavelength, detector distance, detector
translation) or scan angles.

Calibrate Powder
----------------
This dialog will import a TIFF or CBF file containing measurements of a
powder calibrant and refine the detector position and coordinates, using
the PyFAI API. Alternatively, if the calibration parameters are already
available in a PONI file, they can be directly imported. The resulting
powder data and calbration parameters are then saved to the
configuration template previously created using the *New Configuration*
dialog.

.. figure:: /images/calibrate-powder.png
   :align: center
   :width: 80%

After launching the dialog, select the entry in the configuration file
to be calibrated by the powder measurement, *i.e.*, the one with the
correct wavelength, detector distance and translations. This expands the
dialog with the default parameters defined by the settings file. The
checkboxes at the side of each parameter specify whether the parameter
is to be refined. By default, the wavelength checkbox is de-selected,
since this is normally defined accurately by other means. It is too
highly correlated to the detector distance for both to be refined
simultaneously. 

Then click on "Import Powder Data" to select the powder calibration
file. This will generate a plot containing the powder data on a log
scale. Select the approprate powder calibrant from those specified in
the Calibrant pull-down menu.

To obtain an initial calibration, zoom into this plot to display
the first few rings.

.. figure:: /images/select-ring.png
   :align: center
   :width: 80%

After clicking on "Select Points", click somewhere on the innermost
ring. This triggers the PyFAI Massif module, which automatically detects
other points on the Debye-Scherrer ring that are contiguous to the
selected point. Because of the gaps between detector chips, the Massif
detection is confined to pixels within a single chip, so it is normally
necessary to select other points on neighboring chips to complete a
single ring. In the above ring, four selections, corresponding to the
brighter red circles, were made.

It is only necessary to do this for a single ring. De-select the "Select
Points" button and click "Calibrate" to perform an initial calibration.
After this, it is possible to generate selections of the other rings
using the "Autogenerate Rings" button. Select how many rings to
generate, using the ring pull-down menu.

.. figure:: /images/autogenerate-rings.png
   :align: center
   :width: 80%

In this example, the pull-down menu was set to "Ring6". When enough
rings have been defined, click "Calibrate" again to produce a more
accurate refinement. 
